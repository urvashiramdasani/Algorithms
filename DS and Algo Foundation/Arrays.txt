Stack allocation : -
int arr[n], int arr[100], int arr[] = {10, 15, 20, 30}

Heap Allocation - int *arr = new int[n]

Dynamic array first allocate a memory block. If this block is filled, it doubles or triples the original size (depends).

If we input n elements in an n sized dynamic array, it will take O(1) time. If we input (n+1)th elements, we need to double the array and 
copy all the elements to the new array, which would take theta(n) time.
Therefore, average time complexity = O(1) + O(1) + ... (ntimes) + theta(n) / n + 1 = O(1)

Insert, delete in array - O(n)
Insert and delete at end, get and update ith element - O(1)
Search in array - O(n), O(nlogn)

Look programs - Second Largest, Remove Duplicate, Juggling algorithm

Arrays allow random access of elements. This makes accessing elements by their position faster.
Arrays have better cache locality that can make a pretty big difference in performance.

Rotation of arrays:
1. Normal rotation using extra space = O(n) time and O(n) space
2. One by one rotation k times = O(n * k) time and O(1) space
3. Juggling Algorithm - O(n) time and O(1) space

In juggling algorithm, we first find GCD of n and k and divide the array into that subsets. then move the elements in all sets. Look at the algorithm and example to understand.

Window Sliding Technique - used to find maximum sum of k consecutive elements in an array in O(n) time. first calculate the sum of first k element and set this to max_sum. Now slide the window (k units long) to index 1. subtract the first element and add the end element and compare with max_sum and update accordingly. See example

Prefix sum array - The prefix sum array of any array, arr[] is defined as an array of same size say, prefixSum[] such that the value at any index i in prefixSum[] is sum of all elements from indexes 0 to i in arr[].

Vector functions:
1. capacity() – Returns the size of the storage space currently allocated to the vector expressed as number of elements.
2. emplace() – It extends the container by inserting new element at position.
3. emplace_back() – It is used to insert a new element into the vector container, the new element is added to the end of the vector.

We can also use list in place of vector (doubly linked list, for single linked list use forward_list):
1. It has functions like reverse(), sort() (common in both algorithm and list)

advance() :- This function is used to increment the iterator position till the specified number mentioned in its arguments.
next() :- This function returns the new iterator that the iterator would point after advancing the positions mentioned in its arguments.
prev() :- This function returns the new iterator that the iterator would point after decrementing the positions mentioned in its arguments.

inserter() :- This function is used to insert the elements at any position in the container. It accepts 2 arguments, the container and iterator to position where the elements have to be inserted.